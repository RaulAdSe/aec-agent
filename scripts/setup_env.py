#!/usr/bin/env python3
"""
Environment setup script for AEC Compliance Agent.

This script helps you create a .env file with the necessary environment variables.
"""

import os
from pathlib import Path


def create_env_file():
    """Create .env file with environment variables."""
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Setup cancelled.")
            return False
    
    print("üîß Setting up environment variables...")
    
    # Get OpenAI API key
    openai_key = input("Enter your OpenAI API key: ").strip()
    if not openai_key:
        print("‚ùå OpenAI API key is required!")
        return False
    
    # Optional: Get other settings
    print("\nüìù Optional settings (press Enter for defaults):")
    
    openai_model = input("OpenAI model [gpt-3.5-turbo]: ").strip() or "gpt-3.5-turbo"
    temperature = input("Temperature [0.1]: ").strip() or "0.1"
    max_tokens = input("Max tokens [1000]: ").strip() or "1000"
    
    # Create .env content
    env_content = f"""# AEC Compliance Agent - Environment Configuration
# Generated by setup_env.py

# =============================================================================
# API KEYS
# =============================================================================

# OpenAI API Key (Required for RAG system - Pilar 3)
OPENAI_API_KEY={openai_key}

# =============================================================================
# RAG SYSTEM CONFIGURATION
# =============================================================================

# OpenAI Model Configuration
OPENAI_MODEL={openai_model}
OPENAI_TEMPERATURE={temperature}
OPENAI_MAX_TOKENS={max_tokens}

# Embeddings Configuration
EMBEDDINGS_MODEL=sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
EMBEDDINGS_DEVICE=cpu

# Vectorstore Configuration
VECTORSTORE_DIR=vectorstore/normativa_db
CHUNK_SIZE=1000
CHUNK_OVERLAP=200
RETRIEVAL_K=3

# =============================================================================
# DATA PATHS
# =============================================================================

# Document Directories
NORMATIVA_DIR=data/normativa
BLUEPRINTS_DIR=data/blueprints
EXTRACTED_DIR=data/extracted

# Output Directories
OUTPUTS_DIR=outputs
LOGS_DIR=outputs/logs
REPORTS_DIR=outputs/reports
VISUALIZATIONS_DIR=outputs/visualizations

# =============================================================================
# EXTRACTION CONFIGURATION
# =============================================================================

# DWG/DXF Processing
DXF_TOLERANCE=0.001
MIN_ROOM_AREA=1.0
MIN_DOOR_WIDTH=0.6

# CAD Layer Names (case-insensitive)
LAYER_ROOMS=habitaciones,rooms,espacios
LAYER_DOORS=puertas,doors,accesos
LAYER_WALLS=muros,walls,paramentos
LAYER_WINDOWS=ventanas,windows

# =============================================================================
# CALCULATION PARAMETERS
# =============================================================================

# Geometry Calculations
GEOMETRY_PRECISION=6
GRAPH_TOLERANCE=0.01

# Compliance Thresholds
MIN_DOOR_WIDTH_CM=80
MAX_EVACUATION_DISTANCE_M=30
MIN_CORRIDOR_WIDTH_CM=120

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log Levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s
LOG_FILE=extraction.log

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Environment: development, testing, production
ENVIRONMENT=development

# Debug Mode
DEBUG=True

# Test Configuration
TEST_DATA_DIR=tests/fixtures
TEST_OUTPUT_DIR=test_outputs

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================

# Parallel Processing
MAX_WORKERS=4
BATCH_SIZE=32

# Memory Management
MAX_MEMORY_USAGE=0.8
CACHE_SIZE=1000

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# API Rate Limiting
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=3600

# Data Privacy
ENABLE_DATA_LOGGING=False
ANONYMIZE_DATA=True

# =============================================================================
# INTEGRATION SETTINGS
# =============================================================================

# Database (if using external DB)
DATABASE_URL=sqlite:///aec_compliance.db

# Webhook URLs (for notifications)
WEBHOOK_URL=
SLACK_WEBHOOK_URL=

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable/Disable Features
ENABLE_RAG=True
ENABLE_VISUALIZATION=True
ENABLE_EXPORT=True
ENABLE_BATCH_PROCESSING=True

# Advanced Features
ENABLE_ML_PREDICTIONS=False
ENABLE_REAL_TIME_PROCESSING=False
"""
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"‚úÖ .env file created successfully!")
        print(f"üìÅ Location: {env_file.absolute()}")
        
        # Verify the file was created
        if env_file.exists():
            print("‚úÖ File verification: OK")
        else:
            print("‚ùå File verification: FAILED")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False


def verify_setup():
    """Verify that the environment is set up correctly."""
    print("\nüîç Verifying environment setup...")
    
    # Check if .env file exists
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå .env file not found!")
        return False
    
    # Load environment variables
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        # Check OpenAI API key
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key:
            print("‚ùå OPENAI_API_KEY not found in .env file!")
            return False
        
        if openai_key == "your-openai-api-key-here":
            print("‚ùå Please replace the placeholder API key with your actual key!")
            return False
        
        print("‚úÖ OPENAI_API_KEY found")
        
        # Check other important variables
        model = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
        print(f"‚úÖ OpenAI model: {model}")
        
        vectorstore_dir = os.getenv("VECTORSTORE_DIR", "vectorstore/normativa_db")
        print(f"‚úÖ Vectorstore directory: {vectorstore_dir}")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv not installed. Install with: pip install python-dotenv")
        return False
    except Exception as e:
        print(f"‚ùå Error verifying setup: {e}")
        return False


def main():
    """Main setup function."""
    print("üöÄ AEC Compliance Agent - Environment Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path("src/rag").exists():
        print("‚ùå Please run this script from the project root directory!")
        return 1
    
    # Create .env file
    if not create_env_file():
        return 1
    
    # Verify setup
    if not verify_setup():
        print("\n‚ùå Setup verification failed!")
        return 1
    
    print("\nüéâ Environment setup complete!")
    print("\nüìã Next steps:")
    print("1. Test the RAG system: python scripts/test_rag_system.py")
    print("2. Run unit tests: pytest tests/unit/rag/ -v")
    print("3. Check the documentation: docs/environment_setup.md")
    
    return 0


if __name__ == "__main__":
    exit(main())
